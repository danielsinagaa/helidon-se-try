
server:
  port: 8088
  host: 0.0.0.0

db:
  source: jdbc
  connection:
    url: jdbc:postgresql://localhost:5432/helidontest
    username: postgres
    password: admin
    poolName: hikariPool
  services:
    metrics:
      - type: METER
  health-check:
    type: "dml"
    statementName: "ping"
  statements:
    # Ping statement
    ping: "SET @HELIDON_PING=0"
    #CREATE ROLE
    create-role: "CREATE TABLE IF NOT EXISTS Role(id SERIAL PRIMARY KEY, name VARCHAR NOT NULL)"
    #SELECT ALL ROLES
    select-all-role: "SELECT * FROM Role"
    #SELECT ROLE BY ID
    select-role-by-id: "SELECT * FROM Role WHERE id = :id"
    #INSERT NEW ROLE
    insert-role: "INSERT INTO Role(name) VALUES(?)"
    #DELETE ROLE BY ID
    delete-role-by-id: "DELETE FROM Role WHERE id = :id"
    #DELETE ALL ROLE
    delete-role: "DELETE FROM Role"
    #CREATE EMPLOYEE
    create-employee: "CREATE TABLE IF NOT EXISTS Employee(id SERIAL PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role_id integer REFERENCES Role (id) ON DELETE CASCADE)"
    #SELECT ALL EMPLOYEES
    select-all-employee: "SELECT Employee.id, username, Role.name as role FROM Employee INNER JOIN Role ON Employee.role_id = Role.id ORDER BY Employee.id"
    #SELECT EMPLOYEE BY ID
    select-employee-by-id: "SELECT Employee.id, username, Role.name as role FROM Employee INNER JOIN Role ON Employee.role_id = Role.id WHERE Employee.id = :id"
    #SELECT EMPLOYEE BY USERNAME
    select-employee-by-username: "SELECT username, password, Role.name as role FROM Employee INNER JOIN Role ON Employee.role_id = Role.id WHERE Employee.username = :username"
    #INSERT NEW EMPLOYEE
    insert-employee: "INSERT INTO Employee(username, password, role_id) VALUES(?,?,?)"
    #DELETE EMPLOYEE BY ID
    delete-employee-by-id: "DELETE FROM Employee WHERE id = :id"
    #DELETE ALL EMPLOYEE
    delete-employee: "DELETE FROM Employee"
    #SELECT ALL EMPLOYEES
    find-all-employee: "SELECT Employee.id, username, password, Role.name as role FROM Employee INNER JOIN Role ON Employee.role_id = Role.id ORDER BY Employee.id"
    #CREATE TASK
    create-task: "CREATE TABLE IF NOT EXISTS Task(id SERIAL PRIMARY KEY, task_name VARCHAR NOT NULL, finished boolean DEFAULT false, verified boolean DEFAULT false)"
    #SELECT ALL TASK
    select-all-task: "SELECT id, task_name, finished, verified FROM Task"
    #INSERT NEW TASK
    insert-new-task: "INSERT INTO Task(task_name) VALUES (:task)"
    #SELECT TASK BY ID
    select-task-by-id: "SELECT id, task_name, finished, verified FROM Task WHERE id = :id"
    #UPDATE FINISHED TASK
    update-finished-task: "UPDATE Task SET finished = true WHERE id = :id"
    #UPDATE VERIFIED TASK
    update-verified-task: "UPDATE Task SET verified = true WHERE id = :id"
    #DELETE EMPLOYEE BY ID
    delete-task-by-id: "DELETE FROM Task WHERE id = :id"

    #CREATE MASTER ROLE
    create-role-master: "INSERT INTO Role(id,name) SELECT 99,'master' WHERE NOT EXISTS (SELECT name FROM Role WHERE name = 'master')"
    #CREATE MASTER EMPLOYEE
    create-employee-master: "INSERT INTO Employee(username, password, role_id) SELECT 'master', 'password', 99 WHERE NOT EXISTS (SELECT username FROM Employee WHERE username = 'master')"
